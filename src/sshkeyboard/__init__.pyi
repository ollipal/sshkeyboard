"""
This type stub file was generated by pyright.
"""

# import asyncio
# import concurrent.futures
# import fcntl
# import msvcrt
# import os
# import sys
# import termios
# import traceback
# import tty
# from contextlib import contextmanager
# from inspect import signature
# from platform import system
# from time import time
# from types import SimpleNamespace
from typing import Any, Callable, Optional, TypeAlias

"""sshkeyboard"""
__version__: str = ...
_is_windows: bool = ...
_running: bool = ...
_should_run: bool = ...
_UNIX_ANSI_CHAR_TO_READABLE: dict[str, str] = ...
_WIN_CHAR_TO_READABLE: dict[str, str] = ...
_CHAR_TO_READABLE: dict[str, str] = ...
_WIN_SPECIAL_CHAR_STARTS: set[str] = ...
_WIN_REQUIRES_TWO_READS_STARTS: set[str] = ...
Key: TypeAlias = str

def listen_keyboard(
    on_press: Optional[Callable[[str], Any]] = ...,
    on_release: Optional[Callable[[str], Any]] = ...,
    until: Optional[str] = ...,
    sequential: bool = ...,
    delay_second_char: float = ...,
    delay_other_chars: float = ...,
    lower: bool = ...,
    debug: bool = ...,
    max_thread_pool_workers: Optional[int] = ...,
    sleep: float = ...,
) -> None:
    """Listen for keyboard events and f"""
    ...

async def listen_keyboard_manual(
    on_press: Optional[Callable[[str], Any]] = ...,
    on_release: Optional[Callable[[str], Any]] = ...,
    until: Optional[str] = ...,
    sequential: bool = ...,
    delay_second_char: float = ...,
    delay_other_chars: float = ...,
    lower: bool = ...,
    debug: bool = ...,
    max_thread_pool_workers: Optional[int] = ...,
    sleep: float = ...,
) -> None:
    """The same as :func:`~sshkeyboard."""
    ...

def stop_listening() -> None:
    """Stops the ongoing keyboard listener."""
    ...

if __name__ == "__main__":
    async def press(key): ...
    def release(key): ...
